diff -urNp openswan-2.6.24-orig-cvs-patched/include/ietf_constants.h openswan-2.6.24/include/ietf_constants.h
--- openswan-2.6.24-orig-cvs-patched/include/ietf_constants.h	2010-01-09 20:34:38.000000000 -0500
+++ openswan-2.6.24/include/ietf_constants.h	2010-01-18 12:35:29.000000000 -0500
@@ -190,7 +190,9 @@
 
 #define MD2_DIGEST_SIZE         BYTES_FOR_BITS(128)     /* ought to be supplied by md2.h */
 #define MD5_DIGEST_SIZE		BYTES_FOR_BITS(128)	/* ought to be supplied by md5.h */
+#define MD5_DIGEST_SIZE_96     BYTES_FOR_BITS(96)      /* IKEV2 integrity algorithms */
 #define SHA1_DIGEST_SIZE	BYTES_FOR_BITS(160)	/* ought to be supplied by sha1.h */
+#define SHA1_DIGEST_SIZE_96	BYTES_FOR_BITS(96)	/* IKEV2 integrity algorithms */
 
 #define SHA2_256_DIGEST_SIZE	BYTES_FOR_BITS(256)	/* sha2.h */
 #define SHA2_384_DIGEST_SIZE	BYTES_FOR_BITS(384)
diff -urNp openswan-2.6.24-orig-cvs-patched/programs/pluto/crypt_dh.c openswan-2.6.24/programs/pluto/crypt_dh.c
--- openswan-2.6.24-orig-cvs-patched/programs/pluto/crypt_dh.c	2010-01-09 20:34:38.000000000 -0500
+++ openswan-2.6.24/programs/pluto/crypt_dh.c	2010-01-18 13:12:06.000000000 -0500
@@ -58,7 +58,7 @@
 # include <keyhi.h>
 # include "oswconf.h"
 
-#define PK11_Derive(base, mechanism, param, target, operation, keysize)  \
+//#define PK11_Derive(base, mechanism, param, target, operation, keysize)  \
 	PK11_Derive_osw(base, mechanism, param, target, operation, keysize)
 
 static PK11SymKey *pk11_extract_derive_wrapper_osw(PK11SymKey *base, CK_EXTRACT_PARAMS bs
@@ -68,7 +68,7 @@ static PK11SymKey *pk11_extract_derive_w
       param.data = (unsigned char*)&bs;
       param.len = sizeof (bs);
 
-    return PK11_Derive(base, CKM_EXTRACT_KEY_FROM_KEY, &param, target, operation, keySize);
+    return PK11_Derive_osw(base, CKM_EXTRACT_KEY_FROM_KEY, &param, target, operation, keySize);
 }
 /*
 static CK_MECHANISM_TYPE nss_hmac_mech(const struct hash_desc *hasher)
@@ -329,11 +329,11 @@ skeyid_preshared(const chunk_t pss
     //nss_symkey_log(tkey6, "pss+ipad+nir");
 
     //PK11SymKey *tkey1 = pk11_derive_wrapper_osw(shared, CKM_CONCATENATE_DATA_AND_BASE, buf1_chunk, mechanism, CKA_DERIVE, 0);
-    PK11SymKey *tkey2 = PK11_Derive(tkey6, mechanism, NULL, CKM_CONCATENATE_DATA_AND_BASE, CKA_DERIVE, 0);
+    PK11SymKey *tkey2 = PK11_Derive_osw(tkey6, mechanism, NULL, CKM_CONCATENATE_DATA_AND_BASE, CKA_DERIVE, 0);
     //nss_symkey_log(tkey2, "pss : tkey2");
 
     PK11SymKey *tkey3 = pk11_derive_wrapper_osw(tkey2, CKM_CONCATENATE_DATA_AND_BASE, buf2_chunk, mechanism, CKA_DERIVE, 0);
-    skeyid = PK11_Derive(tkey3, mechanism, NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
+    skeyid = PK11_Derive_osw(tkey3, mechanism, NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
     //nss_symkey_log(tkey2, "pss : tkey3");
 
     skeyid_chunk->len = sizeof(PK11SymKey *);
@@ -434,9 +434,9 @@ skeyid_digisig(const chunk_t ni
     buf2_chunk.len=HMAC_BUFSIZE;
 
     PK11SymKey *tkey1 = pk11_derive_wrapper_osw(shared, CKM_CONCATENATE_DATA_AND_BASE, buf1_chunk, mechanism, CKA_DERIVE, 0);
-    PK11SymKey *tkey2 = PK11_Derive(tkey1, mechanism, NULL, CKM_CONCATENATE_DATA_AND_BASE, CKA_DERIVE, 0);
+    PK11SymKey *tkey2 = PK11_Derive_osw(tkey1, mechanism, NULL, CKM_CONCATENATE_DATA_AND_BASE, CKA_DERIVE, 0);
     PK11SymKey *tkey3 = pk11_derive_wrapper_osw(tkey2, CKM_CONCATENATE_DATA_AND_BASE, buf2_chunk, mechanism, CKA_DERIVE, 0);
-    skeyid = PK11_Derive(tkey3, mechanism, NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
+    skeyid = PK11_Derive_osw(tkey3, mechanism, NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
 
     skeyid_chunk->len = sizeof(PK11SymKey *);
     skeyid_chunk->ptr = alloc_bytes(skeyid_chunk->len, "calculated skeyid");
@@ -560,7 +560,7 @@ calc_skeyids_iv(struct pcr_skeyid_q *skq
     param.data=(unsigned char *) &keyhandle;
     param.len=sizeof(keyhandle);
 
-    PK11SymKey *tkey3 = PK11_Derive(tkey2, CKM_CONCATENATE_BASE_AND_KEY, &param, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
+    PK11SymKey *tkey3 = PK11_Derive_osw(tkey2, CKM_CONCATENATE_BASE_AND_KEY, &param, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
     PR_ASSERT(tkey3!=NULL);
 
     PK11SymKey *tkey4 = pk11_derive_wrapper_osw(tkey3, CKM_CONCATENATE_BASE_AND_DATA
@@ -577,7 +577,7 @@ calc_skeyids_iv(struct pcr_skeyid_q *skq
 
     PR_ASSERT(tkey6!=NULL);
 
-    PK11SymKey *tkey7 = PK11_Derive(tkey6, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
+    PK11SymKey *tkey7 = PK11_Derive_osw(tkey6, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
     PR_ASSERT(tkey7!=NULL);
 
     PK11SymKey *tkey8 = pk11_derive_wrapper_osw(tkey1, CKM_XOR_BASE_AND_DATA
@@ -589,10 +589,10 @@ calc_skeyids_iv(struct pcr_skeyid_q *skq
     param.data=(unsigned char*)&keyhandle;
     param.len=sizeof(keyhandle);
 
-    PK11SymKey *tkey9 = PK11_Derive(tkey8, CKM_CONCATENATE_BASE_AND_KEY, &param, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
+    PK11SymKey *tkey9 = PK11_Derive_osw(tkey8, CKM_CONCATENATE_BASE_AND_KEY, &param, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
     PR_ASSERT(tkey9!=NULL);
 
-    skeyid_d = PK11_Derive(tkey9, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
+    skeyid_d = PK11_Derive_osw(tkey9, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
     PR_ASSERT(skeyid_d!=NULL);
     nss_symkey_log(skeyid_d, "skeyid_d");
      /*****End of SKEYID_d derivation***************************************/
@@ -603,14 +603,14 @@ calc_skeyids_iv(struct pcr_skeyid_q *skq
     param.data=(unsigned char*)&keyhandle;
     param.len=sizeof(keyhandle);
 
-    PK11SymKey *tkey10 = PK11_Derive(tkey2, CKM_CONCATENATE_BASE_AND_KEY, &param, CKM_CONCATENATE_BASE_AND_KEY, CKA_DERIVE, 0);
+    PK11SymKey *tkey10 = PK11_Derive_osw(tkey2, CKM_CONCATENATE_BASE_AND_KEY, &param, CKM_CONCATENATE_BASE_AND_KEY, CKA_DERIVE, 0);
     PR_ASSERT(tkey10!=NULL);
 
     keyhandle=PK11_GetSymKeyHandle(shared);
     param.data=(unsigned char*)&keyhandle;
     param.len=sizeof(keyhandle);
 
-    PK11SymKey *tkey11 = PK11_Derive(tkey10, CKM_CONCATENATE_BASE_AND_KEY, &param, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
+    PK11SymKey *tkey11 = PK11_Derive_osw(tkey10, CKM_CONCATENATE_BASE_AND_KEY, &param, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
     PR_ASSERT(tkey11!=NULL);
 
     PK11SymKey *tkey12 = pk11_derive_wrapper_osw(tkey11, CKM_CONCATENATE_BASE_AND_DATA
@@ -625,17 +625,17 @@ calc_skeyids_iv(struct pcr_skeyid_q *skq
                                                 , hmac_val1, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
     PR_ASSERT(tkey14!=NULL);
 
-    PK11SymKey *tkey15 = PK11_Derive(tkey14, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
+    PK11SymKey *tkey15 = PK11_Derive_osw(tkey14, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
     PR_ASSERT(tkey15!=NULL);
 
     keyhandle=PK11_GetSymKeyHandle(tkey15);
     param.data=(unsigned char*)&keyhandle;
     param.len=sizeof(keyhandle);
 
-    PK11SymKey *tkey16 = PK11_Derive(tkey8, CKM_CONCATENATE_BASE_AND_KEY, &param, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
+    PK11SymKey *tkey16 = PK11_Derive_osw(tkey8, CKM_CONCATENATE_BASE_AND_KEY, &param, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
     PR_ASSERT(tkey16!=NULL);
 
-    skeyid_a = PK11_Derive(tkey16, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
+    skeyid_a = PK11_Derive_osw(tkey16, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
     PR_ASSERT(skeyid_a!=NULL);
     nss_symkey_log(skeyid_a, "skeyid_a");
     /*****End of SKEYID_a derivation***************************************/
@@ -646,14 +646,14 @@ calc_skeyids_iv(struct pcr_skeyid_q *skq
     param.data=(unsigned char*)&keyhandle;
     param.len=sizeof(keyhandle);
 
-    PK11SymKey *tkey17 = PK11_Derive(tkey2, CKM_CONCATENATE_BASE_AND_KEY, &param, CKM_CONCATENATE_BASE_AND_KEY, CKA_DERIVE, 0);
+    PK11SymKey *tkey17 = PK11_Derive_osw(tkey2, CKM_CONCATENATE_BASE_AND_KEY, &param, CKM_CONCATENATE_BASE_AND_KEY, CKA_DERIVE, 0);
     PR_ASSERT(tkey17!=NULL);
 
     keyhandle=PK11_GetSymKeyHandle(shared);
     param.data=(unsigned char*)&keyhandle;
     param.len=sizeof(keyhandle);
 
-    PK11SymKey *tkey18 = PK11_Derive(tkey17, CKM_CONCATENATE_BASE_AND_KEY, &param, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
+    PK11SymKey *tkey18 = PK11_Derive_osw(tkey17, CKM_CONCATENATE_BASE_AND_KEY, &param, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
     PR_ASSERT(tkey18!=NULL);
 
     PK11SymKey *tkey19 = pk11_derive_wrapper_osw(tkey18, CKM_CONCATENATE_BASE_AND_DATA
@@ -668,14 +668,14 @@ calc_skeyids_iv(struct pcr_skeyid_q *skq
                                                 , hmac_val2, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
     PR_ASSERT(tkey21!=NULL);
 
-    PK11SymKey *tkey22 = PK11_Derive(tkey21, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_DATA , CKA_DERIVE, 0);
+    PK11SymKey *tkey22 = PK11_Derive_osw(tkey21, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_DATA , CKA_DERIVE, 0);
     PR_ASSERT(tkey22!=NULL);
 
     keyhandle=PK11_GetSymKeyHandle(tkey22);
     param.data=(unsigned char*)&keyhandle;
     param.len=sizeof(keyhandle);
 
-    PK11SymKey *tkey23 = PK11_Derive(tkey8, CKM_CONCATENATE_BASE_AND_KEY, &param, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
+    PK11SymKey *tkey23 = PK11_Derive_osw(tkey8, CKM_CONCATENATE_BASE_AND_KEY, &param, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
     PR_ASSERT(tkey23!=NULL);
 
     DBG(DBG_CRYPT, DBG_log("NSS: enc keysize=%d\n",(int)keysize));
@@ -690,7 +690,7 @@ calc_skeyids_iv(struct pcr_skeyid_q *skq
       param1.len = sizeof (bitstart);
 
        if(keysize <= hasher->hash_digest_len){
-       skeyid_e = PK11_Derive(tkey23, nss_key_derivation_mech(hasher), NULL, CKM_EXTRACT_KEY_FROM_KEY, CKA_DERIVE, 0);
+       skeyid_e = PK11_Derive_osw(tkey23, nss_key_derivation_mech(hasher), NULL, CKM_EXTRACT_KEY_FROM_KEY, CKA_DERIVE, 0);
        PR_ASSERT(skeyid_e!=NULL);
 
 
@@ -706,7 +706,7 @@ calc_skeyids_iv(struct pcr_skeyid_q *skq
         size_t i = 0;
        PK11SymKey *keymat;
 
-        skeyid_e = PK11_Derive(tkey23, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
+        skeyid_e = PK11_Derive_osw(tkey23, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
         PR_ASSERT(skeyid_e!=NULL);
 
         PK11SymKey *tkey25 = pk11_derive_wrapper_osw(skeyid_e, CKM_CONCATENATE_BASE_AND_DATA
@@ -721,7 +721,7 @@ calc_skeyids_iv(struct pcr_skeyid_q *skq
                                                 , hmac_zerobyte, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
         PR_ASSERT(tkey27!=NULL);
 
-        PK11SymKey *tkey28 = PK11_Derive(tkey27, nss_key_derivation_mech(hasher), NULL
+        PK11SymKey *tkey28 = PK11_Derive_osw(tkey27, nss_key_derivation_mech(hasher), NULL
                                          , CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
         PR_ASSERT(tkey28!=NULL);
 
@@ -733,10 +733,10 @@ calc_skeyids_iv(struct pcr_skeyid_q *skq
         param.data=(unsigned char*)&keyhandle;
         param.len=sizeof(keyhandle);
 
-        PK11SymKey *tkey30 = PK11_Derive(tkey29, CKM_CONCATENATE_BASE_AND_KEY, &param, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
+        PK11SymKey *tkey30 = PK11_Derive_osw(tkey29, CKM_CONCATENATE_BASE_AND_KEY, &param, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
         PR_ASSERT(tkey30!=NULL);
 
-       PK11SymKey *tkey31 = PK11_Derive(tkey30, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_KEY, CKA_DERIVE, 0);
+       PK11SymKey *tkey31 = PK11_Derive_osw(tkey30, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_KEY, CKA_DERIVE, 0);
        PR_ASSERT(tkey31!=NULL);
 
        keymat = tkey31;
@@ -761,10 +761,10 @@ calc_skeyids_iv(struct pcr_skeyid_q *skq
                param.data=(unsigned char*)&keyhandle;
                param.len=sizeof(keyhandle);
 
-               PK11SymKey *tkey34 = PK11_Derive(tkey33, CKM_CONCATENATE_BASE_AND_KEY, &param, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
+               PK11SymKey *tkey34 = PK11_Derive_osw(tkey33, CKM_CONCATENATE_BASE_AND_KEY, &param, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
                PR_ASSERT(tkey34!=NULL);
 
-               PK11SymKey *tkey35 = PK11_Derive(tkey34, nss_key_derivation_mech(hasher), NULL
+               PK11SymKey *tkey35 = PK11_Derive_osw(tkey34, nss_key_derivation_mech(hasher), NULL
                                          , CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
                PR_ASSERT(tkey35!=NULL);
 
@@ -772,10 +772,10 @@ calc_skeyids_iv(struct pcr_skeyid_q *skq
                param.data=(unsigned char*)&keyhandle;
                param.len=sizeof(keyhandle);
 
-               PK11SymKey *tkey37 = PK11_Derive(tkey36, CKM_CONCATENATE_BASE_AND_KEY, &param, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
+               PK11SymKey *tkey37 = PK11_Derive_osw(tkey36, CKM_CONCATENATE_BASE_AND_KEY, &param, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
                PR_ASSERT(tkey37!=NULL);
 
-               PK11SymKey *tkey38 = PK11_Derive(tkey37, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_KEY, CKA_DERIVE, 0);
+               PK11SymKey *tkey38 = PK11_Derive_osw(tkey37, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_KEY, CKA_DERIVE, 0);
                PR_ASSERT(tkey38!=NULL);
 
                i += hasher->hash_digest_len;
@@ -787,7 +787,7 @@ calc_skeyids_iv(struct pcr_skeyid_q *skq
                        param.data=(unsigned char*)&keyhandle;
                        param.len=sizeof(keyhandle);
 
-                       PK11SymKey *tkey39 = PK11_Derive(keymat, CKM_CONCATENATE_BASE_AND_KEY, &param, CKM_EXTRACT_KEY_FROM_KEY, CKA_DERIVE, 0);
+                       PK11SymKey *tkey39 = PK11_Derive_osw(keymat, CKM_CONCATENATE_BASE_AND_KEY, &param, CKM_EXTRACT_KEY_FROM_KEY, CKA_DERIVE, 0);
                        PR_ASSERT(tkey39!=NULL);
 
                        enc_key = PK11_DeriveWithFlags(tkey39, CKM_EXTRACT_KEY_FROM_KEY, &param1
@@ -822,7 +822,7 @@ calc_skeyids_iv(struct pcr_skeyid_q *skq
                        param.data=(unsigned char*)&keyhandle;
                        param.len=sizeof(keyhandle);
 
-                       PK11SymKey *tkey39=PK11_Derive(keymat,CKM_CONCATENATE_BASE_AND_KEY, &param,CKM_CONCATENATE_BASE_AND_KEY, CKA_DERIVE, 0);
+                       PK11SymKey *tkey39=PK11_Derive_osw(keymat,CKM_CONCATENATE_BASE_AND_KEY, &param,CKM_CONCATENATE_BASE_AND_KEY, CKA_DERIVE, 0);
                        PR_ASSERT(tkey39!=NULL);
 
 
@@ -1321,7 +1321,7 @@ calc_skeyseed_v2(struct pcr_skeyid_q *sk
 		param.data=(unsigned char*)&keyhandle;
 		param.len=sizeof(keyhandle);
 
-		PK11SymKey *tkey12 = PK11_Derive(tkey2, CKM_CONCATENATE_BASE_AND_KEY
+		PK11SymKey *tkey12 = PK11_Derive_osw(tkey2, CKM_CONCATENATE_BASE_AND_KEY
 			, &param, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
 		PR_ASSERT(tkey12!=NULL);
 
@@ -1355,7 +1355,7 @@ calc_skeyseed_v2(struct pcr_skeyid_q *sk
 	   PR_ASSERT(tkey7!=NULL);
 
 
-	   PK11SymKey *tkey8 = PK11_Derive(tkey7, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
+	   PK11SymKey *tkey8 = PK11_Derive_osw(tkey7, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
 	   PR_ASSERT(tkey8!=NULL);
 
 
@@ -1368,19 +1368,19 @@ calc_skeyseed_v2(struct pcr_skeyid_q *sk
 	   param.data=(unsigned char*)&keyhandle;
 	   param.len=sizeof(keyhandle);
 
-	   PK11SymKey *tkey10 = PK11_Derive(tkey9, CKM_CONCATENATE_BASE_AND_KEY, &param, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
+	   PK11SymKey *tkey10 = PK11_Derive_osw(tkey9, CKM_CONCATENATE_BASE_AND_KEY, &param, nss_key_derivation_mech(hasher), CKA_DERIVE, 0);
 	   PR_ASSERT(tkey10!=NULL);
 
 
 	   if(vpss.counter[0]== 0x01) {
-		finalkey = PK11_Derive(tkey10, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_KEY, CKA_DERIVE, 0);
+		finalkey = PK11_Derive_osw(tkey10, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_KEY, CKA_DERIVE, 0);
 		PR_ASSERT(finalkey!=NULL);
 
 
-		tkey11 = PK11_Derive(tkey10, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_KEY, CKA_DERIVE, 0);
+		tkey11 = PK11_Derive_osw(tkey10, nss_key_derivation_mech(hasher), NULL, CKM_CONCATENATE_BASE_AND_KEY, CKA_DERIVE, 0);
 		PR_ASSERT(tkey11!=NULL);
 	   } else {
-		tkey11 = PK11_Derive(tkey10, nss_key_derivation_mech(hasher), NULL, CKM_EXTRACT_KEY_FROM_KEY, CKA_DERIVE, 0);
+		tkey11 = PK11_Derive_osw(tkey10, nss_key_derivation_mech(hasher), NULL, CKM_EXTRACT_KEY_FROM_KEY, CKA_DERIVE, 0);
 		PR_ASSERT(tkey11!=NULL);
 
 
@@ -1389,10 +1389,10 @@ calc_skeyseed_v2(struct pcr_skeyid_q *sk
 		param.len=sizeof(keyhandle);
 
 		if( total_keysize <= (PK11_GetKeyLength(finalkey)+PK11_GetKeyLength(tkey11)) ) {
-		   finalkey = PK11_Derive(finalkey, CKM_CONCATENATE_BASE_AND_KEY, &param, CKM_EXTRACT_KEY_FROM_KEY, CKA_DERIVE, 0);
+		   finalkey = PK11_Derive_osw(finalkey, CKM_CONCATENATE_BASE_AND_KEY, &param, CKM_EXTRACT_KEY_FROM_KEY, CKA_DERIVE, 0);
 		   PR_ASSERT(finalkey!=NULL);
 		} else {
-		   finalkey = PK11_Derive(finalkey, CKM_CONCATENATE_BASE_AND_KEY, &param, CKM_CONCATENATE_BASE_AND_KEY, CKA_DERIVE, 0);
+		   finalkey = PK11_Derive_osw(finalkey, CKM_CONCATENATE_BASE_AND_KEY, &param, CKM_CONCATENATE_BASE_AND_KEY, CKA_DERIVE, 0);
 		   PR_ASSERT(finalkey!=NULL);
 		}
 	   }
diff -urNp openswan-2.6.24-orig-cvs-patched/programs/pluto/crypto.c openswan-2.6.24/programs/pluto/crypto.c
--- openswan-2.6.24-orig-cvs-patched/programs/pluto/crypto.c	2010-01-09 20:34:38.000000000 -0500
+++ openswan-2.6.24/programs/pluto/crypto.c	2010-01-18 13:12:54.000000000 -0500
@@ -113,6 +113,7 @@ static struct hash_desc crypto_hasher_md
     hash_ctx_size: sizeof(MD5_CTX),
     hash_key_size:   MD5_DIGEST_SIZE,
     hash_digest_len: MD5_DIGEST_SIZE,
+    hash_integ_len: 0,				/*Not applicable*/
     hash_init: (void (*)(void *)) osMD5Init,
     hash_update: (void (*)(void *, const u_int8_t *, size_t)) osMD5Update,
     hash_final: (void (*)(u_char *, void *)) osMD5Final,
@@ -129,6 +130,7 @@ static struct hash_desc crypto_integ_md5
     hash_ctx_size: sizeof(MD5_CTX),
     hash_key_size:   MD5_DIGEST_SIZE,
     hash_digest_len: MD5_DIGEST_SIZE,
+    hash_integ_len: MD5_DIGEST_SIZE_96,		
     hash_init: (void (*)(void *)) osMD5Init,
     hash_update: (void (*)(void *, const u_int8_t *, size_t)) osMD5Update,
     hash_final: (void (*)(u_char *, void *)) osMD5Final,
@@ -145,6 +147,7 @@ static struct hash_desc crypto_hasher_sh
     hash_ctx_size: sizeof(SHA1_CTX),
     hash_key_size:   SHA1_DIGEST_SIZE,
     hash_digest_len: SHA1_DIGEST_SIZE,
+    hash_integ_len: 0,                          /*Not applicable*/
     hash_init: (void (*)(void *)) SHA1Init,
     hash_update: (void (*)(void *, const u_int8_t *, size_t)) SHA1Update,
     hash_final: (void (*)(u_char *, void *)) SHA1Final,
@@ -161,6 +164,7 @@ static struct hash_desc crypto_integ_sha
     hash_ctx_size: sizeof(SHA1_CTX),
     hash_key_size:   SHA1_DIGEST_SIZE,
     hash_digest_len: SHA1_DIGEST_SIZE,
+    hash_integ_len: SHA1_DIGEST_SIZE_96,
     hash_init: (void (*)(void *)) SHA1Init,
     hash_update: (void (*)(void *, const u_int8_t *, size_t)) SHA1Update,
     hash_final: (void (*)(u_char *, void *)) SHA1Final,
diff -urNp openswan-2.6.24-orig-cvs-patched/programs/pluto/hmac.c openswan-2.6.24/programs/pluto/hmac.c
--- openswan-2.6.24-orig-cvs-patched/programs/pluto/hmac.c	2010-01-09 20:34:38.000000000 -0500
+++ openswan-2.6.24/programs/pluto/hmac.c	2010-01-18 13:18:38.000000000 -0500
@@ -61,31 +61,27 @@ hmac_init(struct hmac_ctx *ctx,
     ctx->hmac_digest_len = h->hash_digest_len;
 
 #ifdef HAVE_LIBNSS
-    DBG(DBG_CRYPT, DBG_log("NSS: hmac init"));
+    //DBG(DBG_CRYPT, DBG_log("NSS: hmac init"));
     SECStatus status;
-    PK11SymKey *symkey=NULL; 
-    PK11SymKey *tkey1=NULL;
+    PK11SymKey *symkey=NULL, *tkey1=NULL; 
+    //PK11SymKey *tkey1=NULL;
     unsigned int klen;
     chunk_t hmac_opad, hmac_ipad, hmac_pad;
-    /* empty parameters for the cryptographic context */
 
     memcpy(&symkey, key, key_len);
-
     klen =  PK11_GetKeyLength(symkey);
 
     hmac_opad = hmac_pads(HMAC_OPAD,HMAC_BUFSIZE);
     hmac_ipad = hmac_pads(HMAC_IPAD,HMAC_BUFSIZE);
-    //hmac_pad  = hmac_pads(0x00,HMAC_BUFSIZE-h->hash_digest_len);
     hmac_pad  = hmac_pads(0x00,HMAC_BUFSIZE-klen);
 
     if(klen > HMAC_BUFSIZE) 
     {
-	//tkey1 = PK11_Derive(symkey, nss_key_derivation_mech(h), NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
-	tkey1 = PK11_Derive_osw(symkey, nss_key_derivation_mech(h), NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
+	tkey1 = PK11_Derive_osw(symkey, nss_key_derivation_mech(h)
+				, NULL, CKM_CONCATENATE_BASE_AND_DATA, CKA_DERIVE, 0);
     }
     else
     {
-	DBG(DBG_CRYPT, DBG_log("NSS: key len is smaller than block size"));
 	tkey1 = symkey; 
     }
 
@@ -93,12 +89,10 @@ hmac_init(struct hmac_ctx *ctx,
 				, hmac_pad,CKM_XOR_BASE_AND_DATA, CKA_DERIVE, HMAC_BUFSIZE);
 
     PR_ASSERT(tkey2!=NULL);
-
     ctx->ikey = pk11_derive_wrapper_osw(tkey2, CKM_XOR_BASE_AND_DATA
 					, hmac_ipad,nss_hash_mech(h), CKA_DIGEST, 0);
 
     PR_ASSERT(ctx->ikey !=NULL);
-
     ctx->okey = pk11_derive_wrapper_osw(tkey2, CKM_XOR_BASE_AND_DATA
 					, hmac_opad,nss_hash_mech(h), CKA_DIGEST, 0);
 
@@ -210,9 +204,13 @@ hmac_final(u_char *output, struct hmac_c
     PR_ASSERT(outlen == ctx->hmac_digest_len);
     PK11_DestroyContext(ctx->ctx_nss, PR_TRUE);
 
+    if(ctx->ikey !=NULL) {
     PK11_FreeSymKey(ctx->ikey);
+    }
+    if(ctx->okey != NULL) {
     PK11_FreeSymKey(ctx->okey);
-    DBG(DBG_CRYPT, DBG_log("NSS: hmac final end"));
+    }
+    //DBG(DBG_CRYPT, DBG_log("NSS: hmac final end"));
 #endif
 }
 
@@ -222,8 +220,8 @@ static SECOidTag nss_hash_oid(const stru
     SECOidTag mechanism=0;
 
     switch(hasher->common.algo_id) {
-	case OAKLEY_MD5:   mechanism = SEC_OID_MD5; break;
-	case OAKLEY_SHA1:  mechanism = SEC_OID_SHA1; break;
+	case OAKLEY_MD5:       mechanism = SEC_OID_MD5;    break;
+	case OAKLEY_SHA1:      mechanism = SEC_OID_SHA1;   break;
 	case OAKLEY_SHA2_256:  mechanism = SEC_OID_SHA256; break;
 	case OAKLEY_SHA2_384:  mechanism = SEC_OID_SHA384; break;
 	case OAKLEY_SHA2_512:  mechanism = SEC_OID_SHA512; break;
@@ -237,8 +235,8 @@ static CK_MECHANISM_TYPE nss_hash_mech(c
     CK_MECHANISM_TYPE mechanism=0x80000000;
 
     switch(hasher->common.algo_id) {
-	case OAKLEY_MD5:   mechanism = CKM_MD5; break;
-	case OAKLEY_SHA1:  mechanism = CKM_SHA_1; break;
+	case OAKLEY_MD5:       mechanism = CKM_MD5;    break;
+	case OAKLEY_SHA1:      mechanism = CKM_SHA_1;  break;
 	case OAKLEY_SHA2_256:  mechanism = CKM_SHA256; break;
 	case OAKLEY_SHA2_384:  mechanism = CKM_SHA384; break;
 	case OAKLEY_SHA2_512:  mechanism = CKM_SHA512; break;
@@ -306,8 +304,10 @@ PK11SymKey * PK11_Derive_osw(PK11SymKey 
         dkey_param.len = sizeof (bs);
         PK11SymKey *tkey2 = PK11_Derive(tkey1, CKM_EXTRACT_KEY_FROM_KEY, &dkey_param, target, operation, len);
         PR_ASSERT(tkey2!=NULL);
-
+	
+	if(tkey1!=NULL) {
         PK11_FreeSymKey(tkey1);
+	}
 	
 	return tkey2;
 
@@ -324,8 +324,8 @@ CK_MECHANISM_TYPE nss_key_derivation_mec
     CK_MECHANISM_TYPE mechanism=0x80000000;
 
     switch(hasher->common.algo_id) {
-	case OAKLEY_MD5:   mechanism = CKM_MD5_KEY_DERIVATION; break;
-	case OAKLEY_SHA1:  mechanism = CKM_SHA1_KEY_DERIVATION; break;
+	case OAKLEY_MD5:       mechanism = CKM_MD5_KEY_DERIVATION; break;
+	case OAKLEY_SHA1:      mechanism = CKM_SHA1_KEY_DERIVATION; break;
 	case OAKLEY_SHA2_256:  mechanism = CKM_SHA256_KEY_DERIVATION; break;
 	case OAKLEY_SHA2_384:  mechanism = CKM_SHA384_KEY_DERIVATION; break;
 	case OAKLEY_SHA2_512:  mechanism = CKM_SHA512_KEY_DERIVATION; break;
diff -urNp openswan-2.6.24-orig-cvs-patched/programs/pluto/ike_alg.h openswan-2.6.24/programs/pluto/ike_alg.h
--- openswan-2.6.24-orig-cvs-patched/programs/pluto/ike_alg.h	2010-01-09 20:34:38.000000000 -0500
+++ openswan-2.6.24/programs/pluto/ike_alg.h	2010-01-18 13:19:05.000000000 -0500
@@ -37,6 +37,7 @@ struct hash_desc {
     size_t hash_key_size;          /* in bits */
     size_t hash_ctx_size;
     size_t hash_digest_len;
+    size_t hash_integ_len;        /*truncated output len when used as an integrity algorithm in IKEV2*/
     void (*hash_init)(void *ctx);
     hash_update_t hash_update;
     void (*hash_final)(u_int8_t *out, void *ctx);
diff -urNp openswan-2.6.24-orig-cvs-patched/programs/pluto/ike_alg_sha2.c openswan-2.6.24/programs/pluto/ike_alg_sha2.c
--- openswan-2.6.24-orig-cvs-patched/programs/pluto/ike_alg_sha2.c	2010-01-09 20:34:38.000000000 -0500
+++ openswan-2.6.24/programs/pluto/ike_alg_sha2.c	2010-01-18 13:19:41.000000000 -0500
@@ -54,7 +54,8 @@ struct hash_desc hash_desc_sha2_256 = {
 	hash_ctx_size: sizeof(sha256_context),
 	hash_key_size: 0,
 	hash_digest_len: SHA2_256_DIGEST_SIZE,
-        hash_init: (void (*)(void *))sha256_init,
+	hash_integ_len: 0,	/*Not applicable*/
+	hash_init: (void (*)(void *))sha256_init,
 	hash_update: (void (*)(void *, const u_char *, size_t ))sha256_write,
 	hash_final:(void (*)(u_char *, void *))sha256_hash_final,
 };
@@ -66,7 +67,8 @@ struct hash_desc hash_desc_sha2_512 = {
 	hash_ctx_size: sizeof(sha512_context),
 	hash_key_size: 0,
 	hash_digest_len: SHA2_512_DIGEST_SIZE,
-        hash_init: (void (*)(void *))sha512_init,
+	hash_integ_len: 0,      /*Not applicable*/
+	hash_init: (void (*)(void *))sha512_init,
 	hash_update: (void (*)(void *, const u_char *, size_t ))sha512_write,
 	hash_final:(void (*)(u_char *, void *))sha512_hash_final,
 };
diff -urNp openswan-2.6.24-orig-cvs-patched/programs/pluto/ikev2_parent.c openswan-2.6.24/programs/pluto/ikev2_parent.c
--- openswan-2.6.24-orig-cvs-patched/programs/pluto/ikev2_parent.c	2010-01-09 20:34:38.000000000 -0500
+++ openswan-2.6.24/programs/pluto/ikev2_parent.c	2010-01-18 16:12:34.000000000 -0500
@@ -989,13 +989,22 @@ static void ikev2_padup_pre_encrypt(stru
     }
 }
 
-static unsigned char *ikev2_authloc(struct msg_digest *md UNUSED
+static unsigned char *ikev2_authloc(struct msg_digest *md
 				    , pb_stream *e_pbs)
 {
     unsigned char *b12;
+    struct state *st = md->st;
+    struct state *pst = st;
+
+    if(st->st_clonedfrom != 0) {
+	pst = state_with_serialno(st->st_clonedfrom);
+	if( pst == NULL) {
+		return NULL;
+	}
+    }
 	
     b12 = e_pbs->cur;
-    if(!out_zero(12, e_pbs, "96-bits of truncated HMAC"))
+    if(!out_zero(pst->st_oakley.integ_hasher->hash_integ_len, e_pbs, "length of truncated HMAC"))
 	return NULL;
 
     return b12;
@@ -1058,7 +1067,7 @@ static stf_status ikev2_encrypt_msg(stru
 	
 	if(DBGP(DBG_PARSING)) {
 	    DBG_dump("data being hmac:", authstart, authloc-authstart);
-	    DBG_dump("out calculated auth:", authloc, 12); 
+	    DBG_dump("out calculated auth:", authloc, pst->st_oakley.integ_hasher->hash_integ_len); 
 	}
     }
     
@@ -1108,12 +1117,12 @@ stf_status ikev2_decrypt_msg(struct msg_
 	
 	if(DBGP(DBG_PARSING)) {
 	    DBG_dump("data being hmac:", authstart, encend-authstart);
-	    DBG_dump("R2 calculated auth:", b12, 12); 
-	    DBG_dump("R2  provided  auth:", encend, 12);
+	    DBG_dump("R2 calculated auth:", b12, pst->st_oakley.integ_hasher->hash_integ_len); 
+	    DBG_dump("R2  provided  auth:", encend, pst->st_oakley.integ_hasher->hash_integ_len);
 	}
 	
 	/* compare first 96 bits == 12 bytes */
-	if(memcmp(b12, encend, 12)!=0) {
+	if(memcmp(b12, encend, pst->st_oakley.integ_hasher->hash_integ_len)!=0) {
 	    openswan_log("R2 failed to match authenticator");
 	    return STF_FAIL;
 	}
diff -urNp openswan-2.6.24-orig-cvs-patched/programs/pluto/ipsec_doi.c openswan-2.6.24/programs/pluto/ipsec_doi.c
--- openswan-2.6.24-orig-cvs-patched/programs/pluto/ipsec_doi.c	2010-01-09 20:34:38.000000000 -0500
+++ openswan-2.6.24/programs/pluto/ipsec_doi.c	2010-01-18 16:14:16.000000000 -0500
@@ -870,6 +870,7 @@ void fmt_isakmp_sa_established(struct st
     char *b = sadetails;
     const char *authname;
     const char *integstr, *integname;
+    char integname_tmp[20];
     
     passert(st->st_oakley.encrypter != NULL);
     passert(st->st_oakley.prf_hasher != NULL);
@@ -878,7 +879,9 @@ void fmt_isakmp_sa_established(struct st
     if(st->st_ikev2) {
 	authname="IKEv2";
 	integstr=" integ=";
-	integname=st->st_oakley.integ_hasher->common.officname;
+	sprintf(integname_tmp,"%s_%d",st->st_oakley.integ_hasher->common.officname
+		, st->st_oakley.integ_hasher->hash_integ_len*BITS_PER_BYTE);
+	integname=(const char*)integname_tmp;
     } else {
 	authname = enum_show(&oakley_auth_names, st->st_oakley.auth);
 	integstr="";
 
